#BlueJ class context
comment0.target=Piece
comment0.text=\ The\ Piece\ class\ creates\ a\ blueprint\ for\ chess\ pieces\ \n\ @author\ Caden\ Lin\ \n\ @version\ May\ 21,\ 2021\ \n\ \n
comment1.params=col\ fileName\ val
comment1.target=Piece(java.awt.Color,\ java.lang.String,\ int)
comment1.text=\ Constructs\ a\ new\ Piece\ with\ the\ given\ attributes\n\ @param\ col\ the\ color\ of\ the\ piece\ \n\ @param\ fileName\ the\ name\ of\ the\ file\ with\ the\ image\ of\ the\ piece\ \n\ @param\ val\ the\ value\ of\ the\ piece\ \n\ \n
comment10.params=dest
comment10.target=boolean\ isValidDestination(Location)
comment10.text=\ Determines\ if\ the\ given\ location\ is\ a\ valid\ destination\ for\ the\ piece\ \n\ @param\ dest\ the\ destination\ to\ chek\ \n\ @return\ true\ if\ the\ piece\ can\ move\ to\ destination,\ false\ otherwise\ \n\ \n
comment11.params=
comment11.target=java.util.ArrayList\ destinations()
comment11.text=\ Determines\ the\ valid\ destinations\ of\ the\ piece\ \n\ @return\ an\ arraylist\ with\ the\ valid\ destinations\ of\ the\ piece\ \n\ \ \ \ \ \ \ \ \ \ (all\ the\ locations\ the\ piece\ can\ move\ to)\ \n\ \n
comment12.params=dests\ direction
comment12.target=void\ sweep(java.util.ArrayList,\ int)
comment12.text=\ Takes\ in\ an\ arraylist\ of\ locations\ and\ adds\ all\ the\ \n\ valid\ destinations\ of\ this\ piece\ in\ a\ given\ direction\ to\ this\ arraylist\ \n\ @param\ dests\ the\ arraylist\ to\ add\ the\ locations\ to\ \n\ @param\ direction\ an\ integer\ that\ species\ the\ direction\ to\ move\ in\ \n\ @postcondition\ the\ arraylist\ has\ been\ filled\ with\ valid\ destinations\ in\ the\ given\ direction\n\ \n
comment2.params=
comment2.target=Board\ getBoard()
comment2.text=\ Gets\ the\ board\ this\ piece\ is\ on\ \n\ @return\ the\ board\ the\ piece\ is\ on\ \n\ \n
comment3.params=
comment3.target=Location\ getLocation()
comment3.text=\ Gets\ the\ location\ of\ the\ piece\ \n\ @return\ the\ location\ of\ the\ piece\ on\ the\ board\ \n\ \n
comment4.params=
comment4.target=java.awt.Color\ getColor()
comment4.text=\ Gets\ the\ color\ of\ the\ piece\n\ @return\ the\ color\ of\ the\ piece\ \n
comment5.params=
comment5.target=java.lang.String\ getImageFileName()
comment5.text=\ Gets\ the\ name\ of\ the\ file\ used\ to\ display\ the\ piece\ \n\ @return\ a\ string\ with\ the\ name\ of\ the\ file\ used\ to\ display\ this\ piece\ \n\ \n
comment6.params=
comment6.target=int\ getValue()
comment6.text=\ Gets\ the\ value\ of\ the\ piece\ \n\ @return\ the\ value\ of\ the\ piece\ \n\ \n
comment7.params=brd\ loc
comment7.target=void\ putSelfInGrid(Board,\ Location)
comment7.text=\n\ Puts\ this\ piece\ into\ a\ board.\ If\ there\ is\ another\ piece\ at\ the\ given\n\ location,\ it\ is\ removed.\ <br\ />\n\ Precondition\:\ (1)\ This\ piece\ is\ not\ contained\ in\ a\ grid\ (2)\n\ <code>loc</code>\ is\ valid\ in\ <code>gr</code>\n\ @param\ brd\ the\ board\ into\ which\ this\ piece\ should\ be\ placed\n\ @param\ loc\ the\ location\ into\ which\ the\ piece\ should\ be\ placed\n
comment8.params=
comment8.target=void\ removeSelfFromGrid()
comment8.text=\n\ Removes\ this\ piece\ from\ its\ board.\ <br\ />\n\ Precondition\:\ This\ piece\ is\ contained\ in\ a\ board\n
comment9.params=newLocation
comment9.target=void\ moveTo(Location)
comment9.text=\n\ Moves\ this\ piece\ to\ a\ new\ location.\ If\ there\ is\ another\ piece\ at\ the\n\ given\ location,\ it\ is\ removed.\ <br\ />\n\ Precondition\:\ (1)\ This\ piece\ is\ contained\ in\ a\ grid\ (2)\n\ <code>newLocation</code>\ is\ valid\ in\ the\ grid\ of\ this\ piece\n\ @param\ newLocation\ the\ new\ location\n
numComments=13
