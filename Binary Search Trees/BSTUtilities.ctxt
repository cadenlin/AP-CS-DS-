#BlueJ class context
comment0.target=BSTUtilities
comment0.text=\n\ a\ collection\ of\ static\ methods\ for\ operating\ on\ binary\ search\ trees.\ \n\ the\ class\ can\ insert\ a\ node,\ check\ if\ a\ tree\ contains\ a\ value,\ and\ delete\ a\ node\ \n\ with\ specific\ value.\ \n\ @author\ Caden\ Lin\ \n\ @version\ January\ 7,\ 2021\ \n\ \ \n
comment1.params=t\ x\ display
comment1.target=boolean\ contains(TreeNode,\ java.lang.Comparable,\ TreeDisplay)
comment1.text=\ \n\ determines\ if\ a\ tree\ contains\ a\ node\ with\ a\ certain\ value\ \n\ @precondition\:\ \ t\ is\ a\ binary\ search\ tree\ in\ ascending\ order\n\ @param\ t\ the\ tree\ to\ search\ \n\ @param\ x\ the\ value\ that\ is\ being\ searched\ for\ \n\ @param\ display\ displays\ the\ searching\ of\ the\ tree\ \n\ \ @return\ true\ if\ t\ contaisn\ the\ value\ x,\ false\ otherwise\n
comment2.params=t\ x\ display
comment2.target=TreeNode\ insert(TreeNode,\ java.lang.Comparable,\ TreeDisplay)
comment2.text=\n\ \ inserts\ a\ node\ with\ a\ given\ value\ into\ a\ new\ if\ there\ is\ not\ \n\ \ already\ a\ node\ with\ that\ value\ \n\ \ @precondition\ t\ is\ a\ binary\ search\ tree\ in\ ascending\ order\ \n\ \ @postcondition\ only\ one\ new\ node\ is\ added\ to\ the\ tree\ \n\ \ @param\ t\ the\ tree\ to\ add\ a\ node\ to\n\ \ @param\ x\ the\ value\ of\ the\ node\ that\ is\ to\ be\ added\ \n\ \ @param\ display\ displays\ the\ traversal\ of\ the\ tree\n\ \ @return\ \ a\ new\ tree\ containing\ x\ if\ the\ tree\ was\ empty\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ otherwise,\ return\ t\ with\ a\ new\ node\ inserted\ at\ the\ appropriate\ location\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ with\ the\ value\ x\ \n
comment3.params=t\ display
comment3.target=TreeNode\ deleteNode(TreeNode,\ TreeDisplay)
comment3.text=\ \n\ deletes\ a\ node\ from\ a\ binary\ search\ tree\ \n\ @precondition\:\ \ t\ is\ a\ binary\ search\ tree\ in\ ascending\ order\n\ @postcondition\:\ nno\ new\ TreeNodes\ have\ been\ created)\n\ @param\ t\ the\ node\ to\ be\ deleted\ \n\ @param\ display\ the\ display\ the\ shows\ the\ traversal\ of\ the\ tree\ \n\ @return\ a\ reference\ to\ the\ tree\ where\ the\ value\ at\ t\ has\ been\ deleted\ \n\ \n
comment4.params=t\ x\ display
comment4.target=TreeNode\ delete(TreeNode,\ java.lang.Comparable,\ TreeDisplay)
comment4.text=\n\ \ deletes\ a\ node\ frm\ a\ BST\ with\ a\ specific\ value\ \n\ \ @precondition\:\ \ t\ is\ a\ binary\ search\ tree\ in\ ascending\ order\n\ \ @postcondition\ no\ new\ TreeNodes\ have\ been\ created\ \n\ \ @param\ t\ the\ root\ of\ the\ tree\ to\ delete\ a\ node\ from\ \n\ \ @param\ x\ the\ value\ of\ the\ node\ that\ is\ to\ be\ deleted\ \n\ \ @param\ display\ displays\ the\ traversal\ of\ the\ tree\ \n\ \ @return\ a\ reference\ to\ a\ tree\ where\ the\ specific\ node\ with\ value\ x\ \n\ \ has\ been\ deleted\ \n
comment5.params=t
comment5.target=TreeNode\ leftMostNode(TreeNode)
comment5.text=\ finds\ the\ leftmost\ node\ of\ a\ tree\n\ @param\ t\ the\ root\ of\ the\ tree\ that\ is\ to\ be\ searched\n\ @return\ the\ leftmost\ node\ of\ the\ tree\ \n\ \n
comment6.params=t\ x
comment6.target=TreeNode\ findParentOfNode(TreeNode,\ java.lang.Comparable)
comment6.text=\ Finds\ the\ parent\ of\ a\ node\ with\ a\ given\ value\ \n\ @param\ t\ the\ root\ of\ the\ tree\ to\ search\ \n\ @param\ x\ the\ value\ of\ the\ node\ whose\ parent\ is\ to\ be\ found\ \n\ @return\ the\ parent\ node\ of\ the\ node\ with\ the\ given\ value\ \n\ \n
numComments=7
