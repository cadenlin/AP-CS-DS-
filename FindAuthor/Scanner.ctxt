#BlueJ class context
comment0.target=Scanner
comment0.text=\n\ A\ Scanner\ is\ responsible\ for\ reading\ an\ input\ stream,\ one\ character\ at\ a\n\ time,\ and\ separating\ the\ input\ into\ tokens.\ \ A\ token\ is\ defined\ as\:\n\ \ 1.\ A\ 'word'\ which\ is\ defined\ as\ a\ non-empty\ sequence\ of\ characters\ that\ \n\ \ \ \ \ begins\ with\ an\ alpha\ character\ and\ then\ consists\ of\ alpha\ characters,\ \n\ \ \ \ \ numbers,\ the\ single\ quote\ character\ "'",\ or\ the\ hyphen\ character\ "-".\ \n\ \ 2.\ An\ 'end-of-sentence'\ delimiter\ defined\ as\ any\ one\ of\ the\ characters\ \n\ \ \ \ \ ".",\ "?",\ "\!".\n\ \ 3.\ An\ end-of-file\ token\ which\ is\ returned\ when\ the\ scanner\ is\ asked\ for\ a\n\ \ \ \ \ token\ and\ the\ input\ is\ at\ the\ end-of-file.\n\ \ 4.\ A\ phrase\ separator\ which\ consists\ of\ one\ of\ the\ characters\ ",","\:"\ or\n\ \ \ \ \ ";".\n\ \ 5.\ A\ digit.\n\ \ 6.\ Any\ other\ character\ not\ defined\ above.\n\ @author\ Caden\ Lin\ \n\ @version\ March\ 26\ 2021\ \n\n
comment1.params=in
comment1.target=Scanner(java.io.Reader)
comment1.text=\n\ Constructor\ for\ Scanner\ objects.\ \ The\ Reader\ object\ should\ be\ one\ of\n\ \ 1.\ A\ StringReader\n\ \ 2.\ A\ BufferedReader\ wrapped\ around\ an\ InputStream\n\ \ 3.\ A\ BufferedReader\ wrapped\ around\ a\ FileReader\n\ \ The\ instance\ field\ for\ the\ Reader\ is\ initialized\ to\ the\ input\ parameter,\n\ \ and\ the\ endOfFile\ indicator\ is\ set\ to\ false.\ \ The\ currentChar\ field\ is\n\ \ initialized\ by\ the\ getNextChar\ method.\n\ @param\ in\ is\ the\ reader\ object\ supplied\ by\ the\ program\ constructing\n\ \ \ \ \ \ \ \ this\ Scanner\ object.\n
comment10.params=
comment10.target=boolean\ hasNextToken()
comment10.text=\ Determines\ if\ the\ program\ is\ at\ the\ end\ of\ the\ file\n\ @return\ true\ if\ the\ program\ is\ at\ end\ of\ file,\ false\ otherwise\ \n
comment11.params=
comment11.target=Token\ nextToken()
comment11.text=\ Returns\ the\ next\ token\ in\ the\ input\ stream\ \n\ @return\ the\ next\ token\ in\ the\ input\n\ \n
comment2.params=
comment2.target=void\ getNextChar()
comment2.text=\n\ The\ getNextChar\ method\ attempts\ to\ get\ the\ next\ character\ from\ the\ input\n\ stream.\ \ It\ sets\ the\ endOfFile\ flag\ true\ if\ the\ end\ of\ file\ is\ reached\ on\n\ the\ input\ stream.\ \ Otherwise,\ it\ reads\ the\ next\ character\ from\ the\ stream\n\ and\ converts\ it\ to\ a\ Java\ String\ object.\n\ postcondition\:\ The\ input\ stream\ is\ advanced\ one\ character\ if\ it\ is\ not\ at\n\ end\ of\ file\ and\ the\ currentChar\ instance\ field\ is\ set\ to\ the\ String\ \n\ representation\ of\ the\ character\ read\ from\ the\ input\ stream.\ \ The\ flag\n\ endOfFile\ is\ set\ true\ if\ the\ input\ stream\ is\ exhausted.\n
comment3.params=str
comment3.target=void\ eat(java.lang.String)
comment3.text=\n\ The\ eat\ method\ compares\ a\ String\ to\ the\ current\ char\ and\ advances\ \n\ in\ the\ text\ if\ the\ two\ are\ equal.\ \n\ @param\ str\ the\ string\ to\ compare\ to\ the\ current\ char\ \n\ @postcondition\ the\ program\ moves\ on\ to\ the\ next\ char\ if\ the\ strings\ are\ equal\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ otherwise,\ an\ error\ is\ thrown\ \n
comment4.params=str
comment4.target=boolean\ isLetter(java.lang.String)
comment4.text=\ Determines\ if\ a\ string\ is\ a\ letter\ \n\ @param\ str\ the\ string\ to\ evaluate\ \n\ @return\ true\ if\ the\ string\ is\ a\ letter,\ false\ otherwise\ \n\ \n
comment5.params=str
comment5.target=boolean\ isDigit(java.lang.String)
comment5.text=\ Determines\ if\ a\ string\ is\ a\ digit\ \n\ @param\ str\ the\ string\ to\ evaluate\ \n\ @return\ true\ if\ the\ string\ is\ a\ digit,\ false\ otherwise\ \n\ \n
comment6.params=str
comment6.target=boolean\ isSpecial(java.lang.String)
comment6.text=\ Determines\ if\ a\ string\ is\ a\ special\ character\ \ \n\ A\ special\ character\ is\ a\ single\ quotation\ mark\ or\ a\ hyphen\ \n\ @param\ str\ the\ string\ to\ evaluate\ \n\ @return\ true\ if\ the\ string\ is\ a\ special\ character,\ false\ otherwise\ \n\ \n
comment7.params=str
comment7.target=boolean\ isSentenceTerminator(java.lang.String)
comment7.text=\ Determines\ if\ a\ string\ is\ a\ sentence\ terminator\ \n\ A\ sentence\ terminator\ is\ a\ period,\ question\ mark,\ or\ exclamation\ mark.\ \n\ @param\ str\ the\ string\ to\ evaluate\ \n\ @return\ true\ if\ the\ string\ is\ a\ letter,\ false\ otherwise\ \n\ \n
comment8.params=str
comment8.target=boolean\ isPhraseTerminator(java.lang.String)
comment8.text=\ Determines\ if\ a\ string\ is\ a\ phrase\ terminator\ \n\ A\ phrase\ terminator\ is\ a\ comma,\ a\ semicolon,\ or\ colon\ \n\ @param\ str\ the\ string\ to\ evaluate\ \n\ @return\ true\ if\ the\ string\ is\ a\ phrase\ terminator\ ,\ false\ otherwise\ \n\ \n
comment9.params=str
comment9.target=boolean\ isSpace(java.lang.String)
comment9.text=\ Determines\ if\ a\ string\ is\ blank\ space\ \n\ @param\ str\ the\ string\ to\ evaluate\ \n\ @return\ true\ if\ the\ string\ is\ blank\ space,\ false\ otherwise\ \n\ \n
numComments=12
